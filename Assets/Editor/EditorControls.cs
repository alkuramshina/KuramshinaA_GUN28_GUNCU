//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Editor/EditorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EditorControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EditorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EditorControls"",
    ""maps"": [
        {
            ""name"": ""Cheats"",
            ""id"": ""dcf64f73-7dcc-4a5a-ae8e-eea627a88a96"",
            ""actions"": [
                {
                    ""name"": ""NextTurn"",
                    ""type"": ""Button"",
                    ""id"": ""345ad860-e1e5-4b17-a4f1-ef8624fcc8a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kill"",
                    ""type"": ""Button"",
                    ""id"": ""544fd7ef-eba3-4d90-9859-c7a5a8bdd243"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a99ac6b-aeb0-418d-ad72-ea765e0f1b5c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b646163-29a5-48a7-b9b5-db746f57b78a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cheats
        m_Cheats = asset.FindActionMap("Cheats", throwIfNotFound: true);
        m_Cheats_NextTurn = m_Cheats.FindAction("NextTurn", throwIfNotFound: true);
        m_Cheats_Kill = m_Cheats.FindAction("Kill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cheats
    private readonly InputActionMap m_Cheats;
    private List<ICheatsActions> m_CheatsActionsCallbackInterfaces = new List<ICheatsActions>();
    private readonly InputAction m_Cheats_NextTurn;
    private readonly InputAction m_Cheats_Kill;
    public struct CheatsActions
    {
        private @EditorControls m_Wrapper;
        public CheatsActions(@EditorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextTurn => m_Wrapper.m_Cheats_NextTurn;
        public InputAction @Kill => m_Wrapper.m_Cheats_Kill;
        public InputActionMap Get() { return m_Wrapper.m_Cheats; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatsActions set) { return set.Get(); }
        public void AddCallbacks(ICheatsActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Add(instance);
            @NextTurn.started += instance.OnNextTurn;
            @NextTurn.performed += instance.OnNextTurn;
            @NextTurn.canceled += instance.OnNextTurn;
            @Kill.started += instance.OnKill;
            @Kill.performed += instance.OnKill;
            @Kill.canceled += instance.OnKill;
        }

        private void UnregisterCallbacks(ICheatsActions instance)
        {
            @NextTurn.started -= instance.OnNextTurn;
            @NextTurn.performed -= instance.OnNextTurn;
            @NextTurn.canceled -= instance.OnNextTurn;
            @Kill.started -= instance.OnKill;
            @Kill.performed -= instance.OnKill;
            @Kill.canceled -= instance.OnKill;
        }

        public void RemoveCallbacks(ICheatsActions instance)
        {
            if (m_Wrapper.m_CheatsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatsActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatsActions @Cheats => new CheatsActions(this);
    public interface ICheatsActions
    {
        void OnNextTurn(InputAction.CallbackContext context);
        void OnKill(InputAction.CallbackContext context);
    }
}
